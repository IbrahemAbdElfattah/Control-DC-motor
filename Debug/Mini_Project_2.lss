
Mini_Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  000018ac  00001940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ce  008000ce  000019ae  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a47  00000000  00000000  00002c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000037df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000394f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006483  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000761d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 06 	call	0xc82	; 0xc82 <main>
      8a:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_2>:
#include "lcd.h"
#include "adc.h"

uint8 tick=0;
ISR(INT1_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b70:	80 91 ce 00 	lds	r24, 0x00CE
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	80 93 ce 00 	sts	0x00CE, r24
	LCD_goToRowColumn(3,0);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("                ");
     b82:	80 e6       	ldi	r24, 0x60	; 96
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	TOGGLE_BIT(PORTB,PB0);
     b8a:	a8 e3       	ldi	r26, 0x38	; 56
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e8 e3       	ldi	r30, 0x38	; 56
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	90 81       	ld	r25, Z
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	89 27       	eor	r24, r25
     b98:	8c 93       	st	X, r24
	TOGGLE_BIT(PORTB,PB1);
     b9a:	a8 e3       	ldi	r26, 0x38	; 56
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e8 e3       	ldi	r30, 0x38	; 56
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	90 81       	ld	r25, Z
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	89 27       	eor	r24, r25
     ba8:	8c 93       	st	X, r24
	if (tick == 1){
     baa:	80 91 ce 00 	lds	r24, 0x00CE
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	41 f4       	brne	.+16     	; 0xbc2 <__vector_2+0x7c>
	LCD_goToRowColumn(3,0);
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("clockwise     ");
     bba:	81 e7       	ldi	r24, 0x71	; 113
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	}
	if (tick == 2){
     bc2:	80 91 ce 00 	lds	r24, 0x00CE
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	51 f4       	brne	.+20     	; 0xbde <__vector_2+0x98>
	LCD_goToRowColumn(3,0);
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("Anti-clockwise  ");
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	tick=0;
     bda:	10 92 ce 00 	sts	0x00CE, r1
	}

}
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <PWM_Timer0_Init>:


void PWM_Timer0_Init(unsigned char set_duty_cycle){
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	0f 92       	push	r0
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //initial timer value
     c10:	e2 e5       	ldi	r30, 0x52	; 82
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle;
     c16:	ec e5       	ldi	r30, 0x5C	; 92
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     c1e:	e3 e5       	ldi	r30, 0x53	; 83
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	8a e6       	ldi	r24, 0x6A	; 106
     c24:	80 83       	st	Z, r24
}
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <INT1_Init>:


void INT1_Init(void)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
     c36:	af e5       	ldi	r26, 0x5F	; 95
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ef e5       	ldi	r30, 0x5F	; 95
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	8f 77       	andi	r24, 0x7F	; 127
     c42:	8c 93       	st	X, r24
	SET_BIT(DDRD,PD3);
     c44:	a1 e3       	ldi	r26, 0x31	; 49
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e1 e3       	ldi	r30, 0x31	; 49
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	8c 93       	st	X, r24
	GICR  |= (1<<INT1);                 // Enable external interrupt pin INT0
     c52:	ab e5       	ldi	r26, 0x5B	; 91
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	eb e5       	ldi	r30, 0x5B	; 91
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11) | (1<<ISC10);   // Trigger INT0 with the raising edge
     c60:	a5 e5       	ldi	r26, 0x55	; 85
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e5 e5       	ldi	r30, 0x55	; 85
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8c 60       	ori	r24, 0x0C	; 12
     c6c:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
     c6e:	af e5       	ldi	r26, 0x5F	; 95
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ef e5       	ldi	r30, 0x5F	; 95
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	80 68       	ori	r24, 0x80	; 128
     c7a:	8c 93       	st	X, r24
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <main>:



int main (void){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <main+0x6>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62

	uint16 adc_value;
	CLEAR_BIT(DDRA,PA0);
     c8c:	aa e3       	ldi	r26, 0x3A	; 58
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ea e3       	ldi	r30, 0x3A	; 58
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB0),
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	8c 93       	st	X, r24
     cb6:	a7 e3       	ldi	r26, 0x37	; 55
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e3       	ldi	r30, 0x37	; 55
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1),
	SET_BIT(DDRB,PB3);

	DDRC = 0xff;
     cc4:	e4 e3       	ldi	r30, 0x34	; 52
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	80 83       	st	Z, r24
	SET_BIT(DDRD,PD0),
     ccc:	a1 e3       	ldi	r26, 0x31	; 49
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e1 e3       	ldi	r30, 0x31	; 49
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	8c 93       	st	X, r24
     cda:	a1 e3       	ldi	r26, 0x31	; 49
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e1 e3       	ldi	r30, 0x31	; 49
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	8c 93       	st	X, r24
	SET_BIT(DDRD,PD1);
	SET_BIT(DDRD,PD2);
     ce8:	a1 e3       	ldi	r26, 0x31	; 49
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e1 e3       	ldi	r30, 0x31	; 49
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	84 60       	ori	r24, 0x04	; 4
     cf4:	8c 93       	st	X, r24

	//PWM_Timer0_Init(128);
	LCD_init();
     cf6:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_init>
	ADC_init();
     cfa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ADC_init>
	INT1_Init();
     cfe:	0e 94 17 06 	call	0xc2e	; 0xc2e <INT1_Init>
	LCD_clearScreen();
     d02:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_clearScreen>

	LCD_displayString("ADC Value = ");
     d06:	81 e9       	ldi	r24, 0x91	; 145
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	LCD_goToRowColumn(1,0);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("MotorSpeed = ");
     d16:	8e e9       	ldi	r24, 0x9E	; 158
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	LCD_goToRowColumn(2,0);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("Rot Direction: ");
     d26:	8c ea       	ldi	r24, 0xAC	; 172
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
	PORTB &= ~((1<<PB0) | (1<<PB1));
     d2e:	a8 e3       	ldi	r26, 0x38	; 56
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e8 e3       	ldi	r30, 0x38	; 56
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8c 7f       	andi	r24, 0xFC	; 252
     d3a:	8c 93       	st	X, r24
	SET_BIT(PORTB,PB0);
     d3c:	a8 e3       	ldi	r26, 0x38	; 56
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e8 e3       	ldi	r30, 0x38	; 56
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	8c 93       	st	X, r24

	LCD_goToRowColumn(3,0);
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString("clockwise");
     d52:	8c eb       	ldi	r24, 0xBC	; 188
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>

	while (1)
	{

		LCD_goToRowColumn(0,12);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	6c e0       	ldi	r22, 0x0C	; 12
     d5e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
		adc_value = ADC_readChannel(0);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 dd 06 	call	0xdba	; 0xdba <ADC_readChannel>
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
		LCD_intgerToString(adc_value);
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	0e 94 ab 0b 	call	0x1756	; 0x1756 <LCD_intgerToString>

		LCD_goToRowColumn(1,13);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	6d e0       	ldi	r22, 0x0D	; 13
     d78:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
		PWM_Timer0_Init(adc_value/4);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	96 95       	lsr	r25
     d82:	87 95       	ror	r24
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	0e 94 02 06 	call	0xc04	; 0xc04 <PWM_Timer0_Init>
		LCD_intgerToString(adc_value/4);
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	0e 94 ab 0b 	call	0x1756	; 0x1756 <LCD_intgerToString>
     d9c:	de cf       	rjmp	.-68     	; 0xd5a <main+0xd8>

00000d9e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     da6:	e7 e2       	ldi	r30, 0x27	; 39
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     dac:	e6 e2       	ldi	r30, 0x26	; 38
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	83 e8       	ldi	r24, 0x83	; 131
     db2:	80 83       	st	Z, r24
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	87 70       	andi	r24, 0x07	; 7
     dca:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     dcc:	a7 e2       	ldi	r26, 0x27	; 39
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e7 e2       	ldi	r30, 0x27	; 39
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 7e       	andi	r24, 0xE0	; 224
     dd8:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     dda:	a7 e2       	ldi	r26, 0x27	; 39
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e2       	ldi	r30, 0x27	; 39
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	90 81       	ld	r25, Z
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 2b       	or	r24, r25
     de8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     dea:	a6 e2       	ldi	r26, 0x26	; 38
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e6 e2       	ldi	r30, 0x26	; 38
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 64       	ori	r24, 0x40	; 64
     df6:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     df8:	e6 e2       	ldi	r30, 0x26	; 38
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	80 71       	andi	r24, 0x10	; 16
     e04:	90 70       	andi	r25, 0x00	; 0
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	b9 f3       	breq	.-18     	; 0xdf8 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	8c 93       	st	X, r24
	return ADC; /* return the data register */
     e18:	e4 e2       	ldi	r30, 0x24	; 36
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     e30:	a1 e3       	ldi	r26, 0x31	; 49
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	87 60       	ori	r24, 0x07	; 7
     e3c:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     e46:	88 e3       	ldi	r24, 0x38	; 56
     e48:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_sendCommand>
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	e9 97       	sbiw	r28, 0x39	; 57
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     e74:	a2 e3       	ldi	r26, 0x32	; 50
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e2 e3       	ldi	r30, 0x32	; 50
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	8c 93       	st	X, r24
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a0 e8       	ldi	r26, 0x80	; 128
     e96:	bf e3       	ldi	r27, 0x3F	; 63
     e98:	8d ab       	std	Y+53, r24	; 0x35
     e9a:	9e ab       	std	Y+54, r25	; 0x36
     e9c:	af ab       	std	Y+55, r26	; 0x37
     e9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	6d a9       	ldd	r22, Y+53	; 0x35
     ea2:	7e a9       	ldd	r23, Y+54	; 0x36
     ea4:	8f a9       	ldd	r24, Y+55	; 0x37
     ea6:	98 ad       	ldd	r25, Y+56	; 0x38
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	53 e4       	ldi	r21, 0x43	; 67
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	89 ab       	std	Y+49, r24	; 0x31
     eba:	9a ab       	std	Y+50, r25	; 0x32
     ebc:	ab ab       	std	Y+51, r26	; 0x33
     ebe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ec0:	69 a9       	ldd	r22, Y+49	; 0x31
     ec2:	7a a9       	ldd	r23, Y+50	; 0x32
     ec4:	8b a9       	ldd	r24, Y+51	; 0x33
     ec6:	9c a9       	ldd	r25, Y+52	; 0x34
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <LCD_sendCommand+0x84>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	98 ab       	std	Y+48, r25	; 0x30
     ede:	8f a7       	std	Y+47, r24	; 0x2f
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     ee2:	69 a9       	ldd	r22, Y+49	; 0x31
     ee4:	7a a9       	ldd	r23, Y+50	; 0x32
     ee6:	8b a9       	ldd	r24, Y+51	; 0x33
     ee8:	9c a9       	ldd	r25, Y+52	; 0x34
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	6d a9       	ldd	r22, Y+53	; 0x35
     efc:	7e a9       	ldd	r23, Y+54	; 0x36
     efe:	8f a9       	ldd	r24, Y+55	; 0x37
     f00:	98 ad       	ldd	r25, Y+56	; 0x38
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	98 ab       	std	Y+48, r25	; 0x30
     f20:	8f a7       	std	Y+47, r24	; 0x2f
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <LCD_sendCommand+0xe4>
     f24:	89 e1       	ldi	r24, 0x19	; 25
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9e a7       	std	Y+46, r25	; 0x2e
     f2a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <LCD_sendCommand+0xd2>
     f34:	9e a7       	std	Y+46, r25	; 0x2e
     f36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3a:	98 a9       	ldd	r25, Y+48	; 0x30
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	98 ab       	std	Y+48, r25	; 0x30
     f40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8f a5       	ldd	r24, Y+47	; 0x2f
     f44:	98 a9       	ldd	r25, Y+48	; 0x30
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <LCD_sendCommand+0xc6>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	69 a9       	ldd	r22, Y+49	; 0x31
     f4e:	7a a9       	ldd	r23, Y+50	; 0x32
     f50:	8b a9       	ldd	r24, Y+51	; 0x33
     f52:	9c a9       	ldd	r25, Y+52	; 0x34
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	98 ab       	std	Y+48, r25	; 0x30
     f5e:	8f a7       	std	Y+47, r24	; 0x2f
     f60:	8f a5       	ldd	r24, Y+47	; 0x2f
     f62:	98 a9       	ldd	r25, Y+48	; 0x30
     f64:	9c a7       	std	Y+44, r25	; 0x2c
     f66:	8b a7       	std	Y+43, r24	; 0x2b
     f68:	8b a5       	ldd	r24, Y+43	; 0x2b
     f6a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <LCD_sendCommand+0x10e>
     f70:	9c a7       	std	Y+44, r25	; 0x2c
     f72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     f74:	a2 e3       	ldi	r26, 0x32	; 50
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e2 e3       	ldi	r30, 0x32	; 50
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e8       	ldi	r26, 0x80	; 128
     f88:	bf e3       	ldi	r27, 0x3F	; 63
     f8a:	8f a3       	std	Y+39, r24	; 0x27
     f8c:	98 a7       	std	Y+40, r25	; 0x28
     f8e:	a9 a7       	std	Y+41, r26	; 0x29
     f90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f92:	6f a1       	ldd	r22, Y+39	; 0x27
     f94:	78 a5       	ldd	r23, Y+40	; 0x28
     f96:	89 a5       	ldd	r24, Y+41	; 0x29
     f98:	9a a5       	ldd	r25, Y+42	; 0x2a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4a e7       	ldi	r20, 0x7A	; 122
     fa0:	53 e4       	ldi	r21, 0x43	; 67
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	8b a3       	std	Y+35, r24	; 0x23
     fac:	9c a3       	std	Y+36, r25	; 0x24
     fae:	ad a3       	std	Y+37, r26	; 0x25
     fb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fb2:	6b a1       	ldd	r22, Y+35	; 0x23
     fb4:	7c a1       	ldd	r23, Y+36	; 0x24
     fb6:	8d a1       	ldd	r24, Y+37	; 0x25
     fb8:	9e a1       	ldd	r25, Y+38	; 0x26
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <LCD_sendCommand+0x176>
		__ticks = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9a a3       	std	Y+34, r25	; 0x22
     fd0:	89 a3       	std	Y+33, r24	; 0x21
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     fd4:	6b a1       	ldd	r22, Y+35	; 0x23
     fd6:	7c a1       	ldd	r23, Y+36	; 0x24
     fd8:	8d a1       	ldd	r24, Y+37	; 0x25
     fda:	9e a1       	ldd	r25, Y+38	; 0x26
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe8:	18 16       	cp	r1, r24
     fea:	4c f5       	brge	.+82     	; 0x103e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fec:	6f a1       	ldd	r22, Y+39	; 0x27
     fee:	78 a5       	ldd	r23, Y+40	; 0x28
     ff0:	89 a5       	ldd	r24, Y+41	; 0x29
     ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9a a3       	std	Y+34, r25	; 0x22
    1012:	89 a3       	std	Y+33, r24	; 0x21
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <LCD_sendCommand+0x1d6>
    1016:	89 e1       	ldi	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 a3       	std	Y+32, r25	; 0x20
    101c:	8f 8f       	std	Y+31, r24	; 0x1f
    101e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1020:	98 a1       	ldd	r25, Y+32	; 0x20
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <LCD_sendCommand+0x1c4>
    1026:	98 a3       	std	Y+32, r25	; 0x20
    1028:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	89 a1       	ldd	r24, Y+33	; 0x21
    102c:	9a a1       	ldd	r25, Y+34	; 0x22
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	9a a3       	std	Y+34, r25	; 0x22
    1032:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1034:	89 a1       	ldd	r24, Y+33	; 0x21
    1036:	9a a1       	ldd	r25, Y+34	; 0x22
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	69 f7       	brne	.-38     	; 0x1016 <LCD_sendCommand+0x1b8>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	6b a1       	ldd	r22, Y+35	; 0x23
    1040:	7c a1       	ldd	r23, Y+36	; 0x24
    1042:	8d a1       	ldd	r24, Y+37	; 0x25
    1044:	9e a1       	ldd	r25, Y+38	; 0x26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9a a3       	std	Y+34, r25	; 0x22
    1050:	89 a3       	std	Y+33, r24	; 0x21
    1052:	89 a1       	ldd	r24, Y+33	; 0x21
    1054:	9a a1       	ldd	r25, Y+34	; 0x22
    1056:	9e 8f       	std	Y+30, r25	; 0x1e
    1058:	8d 8f       	std	Y+29, r24	; 0x1d
    105a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    105c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <LCD_sendCommand+0x200>
    1062:	9e 8f       	std	Y+30, r25	; 0x1e
    1064:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 ad       	ldd	r24, Y+57	; 0x39
    106c:	80 83       	st	Z, r24
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a0 e8       	ldi	r26, 0x80	; 128
    1074:	bf e3       	ldi	r27, 0x3F	; 63
    1076:	89 8f       	std	Y+25, r24	; 0x19
    1078:	9a 8f       	std	Y+26, r25	; 0x1a
    107a:	ab 8f       	std	Y+27, r26	; 0x1b
    107c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107e:	69 8d       	ldd	r22, Y+25	; 0x19
    1080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4a e7       	ldi	r20, 0x7A	; 122
    108c:	53 e4       	ldi	r21, 0x43	; 67
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8d 8b       	std	Y+21, r24	; 0x15
    1098:	9e 8b       	std	Y+22, r25	; 0x16
    109a:	af 8b       	std	Y+23, r26	; 0x17
    109c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109e:	6d 89       	ldd	r22, Y+21	; 0x15
    10a0:	7e 89       	ldd	r23, Y+22	; 0x16
    10a2:	8f 89       	ldd	r24, Y+23	; 0x17
    10a4:	98 8d       	ldd	r25, Y+24	; 0x18
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <LCD_sendCommand+0x262>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	3f c0       	rjmp	.+126    	; 0x113e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    10c0:	6d 89       	ldd	r22, Y+21	; 0x15
    10c2:	7e 89       	ldd	r23, Y+22	; 0x16
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	57 e4       	ldi	r21, 0x47	; 71
    10d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	69 8d       	ldd	r22, Y+25	; 0x19
    10da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <LCD_sendCommand+0x2c2>
    1102:	89 e1       	ldi	r24, 0x19	; 25
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9a 8b       	std	Y+18, r25	; 0x12
    1108:	89 8b       	std	Y+17, r24	; 0x11
    110a:	89 89       	ldd	r24, Y+17	; 0x11
    110c:	9a 89       	ldd	r25, Y+18	; 0x12
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <LCD_sendCommand+0x2b0>
    1112:	9a 8b       	std	Y+18, r25	; 0x12
    1114:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	9c 89       	ldd	r25, Y+20	; 0x14
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9c 8b       	std	Y+20, r25	; 0x14
    111e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	8b 89       	ldd	r24, Y+19	; 0x13
    1122:	9c 89       	ldd	r25, Y+20	; 0x14
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	69 f7       	brne	.-38     	; 0x1102 <LCD_sendCommand+0x2a4>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	6d 89       	ldd	r22, Y+21	; 0x15
    112c:	7e 89       	ldd	r23, Y+22	; 0x16
    112e:	8f 89       	ldd	r24, Y+23	; 0x17
    1130:	98 8d       	ldd	r25, Y+24	; 0x18
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9c 8b       	std	Y+20, r25	; 0x14
    113c:	8b 8b       	std	Y+19, r24	; 0x13
    113e:	8b 89       	ldd	r24, Y+19	; 0x13
    1140:	9c 89       	ldd	r25, Y+20	; 0x14
    1142:	98 8b       	std	Y+16, r25	; 0x10
    1144:	8f 87       	std	Y+15, r24	; 0x0f
    1146:	8f 85       	ldd	r24, Y+15	; 0x0f
    1148:	98 89       	ldd	r25, Y+16	; 0x10
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <LCD_sendCommand+0x2ec>
    114e:	98 8b       	std	Y+16, r25	; 0x10
    1150:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1152:	a2 e3       	ldi	r26, 0x32	; 50
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e2 e3       	ldi	r30, 0x32	; 50
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8b 7f       	andi	r24, 0xFB	; 251
    115e:	8c 93       	st	X, r24
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e8       	ldi	r26, 0x80	; 128
    1166:	bf e3       	ldi	r27, 0x3F	; 63
    1168:	8b 87       	std	Y+11, r24	; 0x0b
    116a:	9c 87       	std	Y+12, r25	; 0x0c
    116c:	ad 87       	std	Y+13, r26	; 0x0d
    116e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	4a e7       	ldi	r20, 0x7A	; 122
    117e:	53 e4       	ldi	r21, 0x43	; 67
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	8f 83       	std	Y+7, r24	; 0x07
    118a:	98 87       	std	Y+8, r25	; 0x08
    118c:	a9 87       	std	Y+9, r26	; 0x09
    118e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	5f e3       	ldi	r21, 0x3F	; 63
    11a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <LCD_sendCommand+0x354>
		__ticks = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	3f c0       	rjmp	.+126    	; 0x1230 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    11b2:	6f 81       	ldd	r22, Y+7	; 0x07
    11b4:	78 85       	ldd	r23, Y+8	; 0x08
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	4c f5       	brge	.+82     	; 0x121c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    11cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <LCD_sendCommand+0x3b4>
    11f4:	89 e1       	ldi	r24, 0x19	; 25
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <LCD_sendCommand+0x3a2>
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	69 f7       	brne	.-38     	; 0x11f4 <LCD_sendCommand+0x396>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	6f 81       	ldd	r22, Y+7	; 0x07
    121e:	78 85       	ldd	r23, Y+8	; 0x08
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <LCD_sendCommand+0x3de>
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1244:	e9 96       	adiw	r28, 0x39	; 57
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	e9 97       	sbiw	r28, 0x39	; 57
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    126c:	a2 e3       	ldi	r26, 0x32	; 50
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e2 e3       	ldi	r30, 0x32	; 50
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    127a:	a2 e3       	ldi	r26, 0x32	; 50
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8d 7f       	andi	r24, 0xFD	; 253
    1286:	8c 93       	st	X, r24
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e8       	ldi	r26, 0x80	; 128
    128e:	bf e3       	ldi	r27, 0x3F	; 63
    1290:	8d ab       	std	Y+53, r24	; 0x35
    1292:	9e ab       	std	Y+54, r25	; 0x36
    1294:	af ab       	std	Y+55, r26	; 0x37
    1296:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	6d a9       	ldd	r22, Y+53	; 0x35
    129a:	7e a9       	ldd	r23, Y+54	; 0x36
    129c:	8f a9       	ldd	r24, Y+55	; 0x37
    129e:	98 ad       	ldd	r25, Y+56	; 0x38
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	89 ab       	std	Y+49, r24	; 0x31
    12b2:	9a ab       	std	Y+50, r25	; 0x32
    12b4:	ab ab       	std	Y+51, r26	; 0x33
    12b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12b8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ba:	7a a9       	ldd	r23, Y+50	; 0x32
    12bc:	8b a9       	ldd	r24, Y+51	; 0x33
    12be:	9c a9       	ldd	r25, Y+52	; 0x34
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	2c f4       	brge	.+10     	; 0x12da <LCD_displayCharacter+0x84>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	98 ab       	std	Y+48, r25	; 0x30
    12d6:	8f a7       	std	Y+47, r24	; 0x2f
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    12da:	69 a9       	ldd	r22, Y+49	; 0x31
    12dc:	7a a9       	ldd	r23, Y+50	; 0x32
    12de:	8b a9       	ldd	r24, Y+51	; 0x33
    12e0:	9c a9       	ldd	r25, Y+52	; 0x34
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	4c f5       	brge	.+82     	; 0x1344 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	6d a9       	ldd	r22, Y+53	; 0x35
    12f4:	7e a9       	ldd	r23, Y+54	; 0x36
    12f6:	8f a9       	ldd	r24, Y+55	; 0x37
    12f8:	98 ad       	ldd	r25, Y+56	; 0x38
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	98 ab       	std	Y+48, r25	; 0x30
    1318:	8f a7       	std	Y+47, r24	; 0x2f
    131a:	0f c0       	rjmp	.+30     	; 0x133a <LCD_displayCharacter+0xe4>
    131c:	89 e1       	ldi	r24, 0x19	; 25
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e a7       	std	Y+46, r25	; 0x2e
    1322:	8d a7       	std	Y+45, r24	; 0x2d
    1324:	8d a5       	ldd	r24, Y+45	; 0x2d
    1326:	9e a5       	ldd	r25, Y+46	; 0x2e
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <LCD_displayCharacter+0xd2>
    132c:	9e a7       	std	Y+46, r25	; 0x2e
    132e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	8f a5       	ldd	r24, Y+47	; 0x2f
    1332:	98 a9       	ldd	r25, Y+48	; 0x30
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	8f a5       	ldd	r24, Y+47	; 0x2f
    133c:	98 a9       	ldd	r25, Y+48	; 0x30
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f7       	brne	.-38     	; 0x131c <LCD_displayCharacter+0xc6>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	69 a9       	ldd	r22, Y+49	; 0x31
    1346:	7a a9       	ldd	r23, Y+50	; 0x32
    1348:	8b a9       	ldd	r24, Y+51	; 0x33
    134a:	9c a9       	ldd	r25, Y+52	; 0x34
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	98 ab       	std	Y+48, r25	; 0x30
    1356:	8f a7       	std	Y+47, r24	; 0x2f
    1358:	8f a5       	ldd	r24, Y+47	; 0x2f
    135a:	98 a9       	ldd	r25, Y+48	; 0x30
    135c:	9c a7       	std	Y+44, r25	; 0x2c
    135e:	8b a7       	std	Y+43, r24	; 0x2b
    1360:	8b a5       	ldd	r24, Y+43	; 0x2b
    1362:	9c a5       	ldd	r25, Y+44	; 0x2c
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <LCD_displayCharacter+0x10e>
    1368:	9c a7       	std	Y+44, r25	; 0x2c
    136a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    136c:	a2 e3       	ldi	r26, 0x32	; 50
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	84 60       	ori	r24, 0x04	; 4
    1378:	8c 93       	st	X, r24
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e8       	ldi	r26, 0x80	; 128
    1380:	bf e3       	ldi	r27, 0x3F	; 63
    1382:	8f a3       	std	Y+39, r24	; 0x27
    1384:	98 a7       	std	Y+40, r25	; 0x28
    1386:	a9 a7       	std	Y+41, r26	; 0x29
    1388:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	6f a1       	ldd	r22, Y+39	; 0x27
    138c:	78 a5       	ldd	r23, Y+40	; 0x28
    138e:	89 a5       	ldd	r24, Y+41	; 0x29
    1390:	9a a5       	ldd	r25, Y+42	; 0x2a
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a e7       	ldi	r20, 0x7A	; 122
    1398:	53 e4       	ldi	r21, 0x43	; 67
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8b a3       	std	Y+35, r24	; 0x23
    13a4:	9c a3       	std	Y+36, r25	; 0x24
    13a6:	ad a3       	std	Y+37, r26	; 0x25
    13a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13aa:	6b a1       	ldd	r22, Y+35	; 0x23
    13ac:	7c a1       	ldd	r23, Y+36	; 0x24
    13ae:	8d a1       	ldd	r24, Y+37	; 0x25
    13b0:	9e a1       	ldd	r25, Y+38	; 0x26
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <LCD_displayCharacter+0x176>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9a a3       	std	Y+34, r25	; 0x22
    13c8:	89 a3       	std	Y+33, r24	; 0x21
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    13cc:	6b a1       	ldd	r22, Y+35	; 0x23
    13ce:	7c a1       	ldd	r23, Y+36	; 0x24
    13d0:	8d a1       	ldd	r24, Y+37	; 0x25
    13d2:	9e a1       	ldd	r25, Y+38	; 0x26
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	6f a1       	ldd	r22, Y+39	; 0x27
    13e6:	78 a5       	ldd	r23, Y+40	; 0x28
    13e8:	89 a5       	ldd	r24, Y+41	; 0x29
    13ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9a a3       	std	Y+34, r25	; 0x22
    140a:	89 a3       	std	Y+33, r24	; 0x21
    140c:	0f c0       	rjmp	.+30     	; 0x142c <LCD_displayCharacter+0x1d6>
    140e:	89 e1       	ldi	r24, 0x19	; 25
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	98 a3       	std	Y+32, r25	; 0x20
    1414:	8f 8f       	std	Y+31, r24	; 0x1f
    1416:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1418:	98 a1       	ldd	r25, Y+32	; 0x20
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_displayCharacter+0x1c4>
    141e:	98 a3       	std	Y+32, r25	; 0x20
    1420:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	89 a1       	ldd	r24, Y+33	; 0x21
    1424:	9a a1       	ldd	r25, Y+34	; 0x22
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9a a3       	std	Y+34, r25	; 0x22
    142a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	89 a1       	ldd	r24, Y+33	; 0x21
    142e:	9a a1       	ldd	r25, Y+34	; 0x22
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <LCD_displayCharacter+0x1b8>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6b a1       	ldd	r22, Y+35	; 0x23
    1438:	7c a1       	ldd	r23, Y+36	; 0x24
    143a:	8d a1       	ldd	r24, Y+37	; 0x25
    143c:	9e a1       	ldd	r25, Y+38	; 0x26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	9a a1       	ldd	r25, Y+34	; 0x22
    144e:	9e 8f       	std	Y+30, r25	; 0x1e
    1450:	8d 8f       	std	Y+29, r24	; 0x1d
    1452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1454:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_displayCharacter+0x200>
    145a:	9e 8f       	std	Y+30, r25	; 0x1e
    145c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
    145e:	e5 e3       	ldi	r30, 0x35	; 53
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	89 ad       	ldd	r24, Y+57	; 0x39
    1464:	80 83       	st	Z, r24
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	89 8f       	std	Y+25, r24	; 0x19
    1470:	9a 8f       	std	Y+26, r25	; 0x1a
    1472:	ab 8f       	std	Y+27, r26	; 0x1b
    1474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	69 8d       	ldd	r22, Y+25	; 0x19
    1478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    147a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8d 8b       	std	Y+21, r24	; 0x15
    1490:	9e 8b       	std	Y+22, r25	; 0x16
    1492:	af 8b       	std	Y+23, r26	; 0x17
    1494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1496:	6d 89       	ldd	r22, Y+21	; 0x15
    1498:	7e 89       	ldd	r23, Y+22	; 0x16
    149a:	8f 89       	ldd	r24, Y+23	; 0x17
    149c:	98 8d       	ldd	r25, Y+24	; 0x18
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_displayCharacter+0x262>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	69 8d       	ldd	r22, Y+25	; 0x19
    14d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9c 8b       	std	Y+20, r25	; 0x14
    14f6:	8b 8b       	std	Y+19, r24	; 0x13
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_displayCharacter+0x2c2>
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	89 8b       	std	Y+17, r24	; 0x11
    1502:	89 89       	ldd	r24, Y+17	; 0x11
    1504:	9a 89       	ldd	r25, Y+18	; 0x12
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_displayCharacter+0x2b0>
    150a:	9a 8b       	std	Y+18, r25	; 0x12
    150c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8b 89       	ldd	r24, Y+19	; 0x13
    1510:	9c 89       	ldd	r25, Y+20	; 0x14
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9c 8b       	std	Y+20, r25	; 0x14
    1516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_displayCharacter+0x2a4>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	8b 89       	ldd	r24, Y+19	; 0x13
    1538:	9c 89       	ldd	r25, Y+20	; 0x14
    153a:	98 8b       	std	Y+16, r25	; 0x10
    153c:	8f 87       	std	Y+15, r24	; 0x0f
    153e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1540:	98 89       	ldd	r25, Y+16	; 0x10
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_displayCharacter+0x2ec>
    1546:	98 8b       	std	Y+16, r25	; 0x10
    1548:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8b 7f       	andi	r24, 0xFB	; 251
    1556:	8c 93       	st	X, r24
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e8       	ldi	r26, 0x80	; 128
    155e:	bf e3       	ldi	r27, 0x3F	; 63
    1560:	8b 87       	std	Y+11, r24	; 0x0b
    1562:	9c 87       	std	Y+12, r25	; 0x0c
    1564:	ad 87       	std	Y+13, r26	; 0x0d
    1566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4a e7       	ldi	r20, 0x7A	; 122
    1576:	53 e4       	ldi	r21, 0x43	; 67
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8f 83       	std	Y+7, r24	; 0x07
    1582:	98 87       	std	Y+8, r25	; 0x08
    1584:	a9 87       	std	Y+9, r26	; 0x09
    1586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	2c f4       	brge	.+10     	; 0x15aa <LCD_displayCharacter+0x354>
		__ticks = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	57 e4       	ldi	r21, 0x47	; 71
    15ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	4c f5       	brge	.+82     	; 0x1614 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <LCD_displayCharacter+0x3b4>
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_displayCharacter+0x3a2>
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <LCD_displayCharacter+0x396>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_displayCharacter+0x3de>
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    163c:	e9 96       	adiw	r28, 0x39	; 57
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <LCD_displayString+0x6>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	0e c0       	rjmp	.+28     	; 0x167e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	fc 01       	movw	r30, r24
    166e:	e2 0f       	add	r30, r18
    1670:	f3 1f       	adc	r31, r19
    1672:	80 81       	ld	r24, Z
    1674:	0e 94 2b 09 	call	0x1256	; 0x1256 <LCD_displayCharacter>
		i++;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	fc 01       	movw	r30, r24
    168a:	e2 0f       	add	r30, r18
    168c:	f3 1f       	adc	r31, r19
    168e:	80 81       	ld	r24, Z
    1690:	88 23       	and	r24, r24
    1692:	39 f7       	brne	.-50     	; 0x1662 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <LCD_goToRowColumn+0x6>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <LCD_goToRowColumn+0x8>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3d 83       	std	Y+5, r19	; 0x05
    16ba:	2c 83       	std	Y+4, r18	; 0x04
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	c1 f0       	breq	.+48     	; 0x16f6 <LCD_goToRowColumn+0x56>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	2c f4       	brge	.+10     	; 0x16da <LCD_goToRowColumn+0x3a>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	61 f0       	breq	.+24     	; 0x16f0 <LCD_goToRowColumn+0x50>
    16d8:	19 c0       	rjmp	.+50     	; 0x170c <LCD_goToRowColumn+0x6c>
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	69 f0       	breq	.+26     	; 0x16fe <LCD_goToRowColumn+0x5e>
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	83 30       	cpi	r24, 0x03	; 3
    16ea:	91 05       	cpc	r25, r1
    16ec:	61 f0       	breq	.+24     	; 0x1706 <LCD_goToRowColumn+0x66>
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	80 5c       	subi	r24, 0xC0	; 192
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	80 5f       	subi	r24, 0xF0	; 240
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	03 c0       	rjmp	.+6      	; 0x170c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	80 5b       	subi	r24, 0xB0	; 176
    170a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_sendCommand>
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <LCD_displayStringRowColumn+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <LCD_displayStringRowColumn+0x8>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6a 83       	std	Y+2, r22	; 0x02
    1734:	5c 83       	std	Y+4, r21	; 0x04
    1736:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	6a 81       	ldd	r22, Y+2	; 0x02
    173c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	62 97       	sbiw	r28, 0x12	; 18
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	9a 8b       	std	Y+18, r25	; 0x12
    176c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	9a 89       	ldd	r25, Y+18	; 0x12
    1772:	9e 01       	movw	r18, r28
    1774:	2f 5f       	subi	r18, 0xFF	; 255
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	b9 01       	movw	r22, r18
    177a:	4a e0       	ldi	r20, 0x0A	; 10
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	0e 94 0f 0c 	call	0x181e	; 0x181e <itoa>
   LCD_displayString(buff);
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_displayString>
}
    178a:	62 96       	adiw	r28, 0x12	; 18
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <LCD_sendCommand>
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <__prologue_saves__>:
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	ca 1b       	sub	r28, r26
    17da:	db 0b       	sbc	r29, r27
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	09 94       	ijmp

000017e8 <__epilogue_restores__>:
    17e8:	2a 88       	ldd	r2, Y+18	; 0x12
    17ea:	39 88       	ldd	r3, Y+17	; 0x11
    17ec:	48 88       	ldd	r4, Y+16	; 0x10
    17ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    17f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17fa:	b9 84       	ldd	r11, Y+9	; 0x09
    17fc:	c8 84       	ldd	r12, Y+8	; 0x08
    17fe:	df 80       	ldd	r13, Y+7	; 0x07
    1800:	ee 80       	ldd	r14, Y+6	; 0x06
    1802:	fd 80       	ldd	r15, Y+5	; 0x05
    1804:	0c 81       	ldd	r16, Y+4	; 0x04
    1806:	1b 81       	ldd	r17, Y+3	; 0x03
    1808:	aa 81       	ldd	r26, Y+2	; 0x02
    180a:	b9 81       	ldd	r27, Y+1	; 0x01
    180c:	ce 0f       	add	r28, r30
    180e:	d1 1d       	adc	r29, r1
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	ed 01       	movw	r28, r26
    181c:	08 95       	ret

0000181e <itoa>:
    181e:	fb 01       	movw	r30, r22
    1820:	9f 01       	movw	r18, r30
    1822:	e8 94       	clt
    1824:	42 30       	cpi	r20, 0x02	; 2
    1826:	c4 f0       	brlt	.+48     	; 0x1858 <itoa+0x3a>
    1828:	45 32       	cpi	r20, 0x25	; 37
    182a:	b4 f4       	brge	.+44     	; 0x1858 <itoa+0x3a>
    182c:	4a 30       	cpi	r20, 0x0A	; 10
    182e:	29 f4       	brne	.+10     	; 0x183a <itoa+0x1c>
    1830:	97 fb       	bst	r25, 7
    1832:	1e f4       	brtc	.+6      	; 0x183a <itoa+0x1c>
    1834:	90 95       	com	r25
    1836:	81 95       	neg	r24
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	64 2f       	mov	r22, r20
    183c:	77 27       	eor	r23, r23
    183e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__udivmodhi4>
    1842:	80 5d       	subi	r24, 0xD0	; 208
    1844:	8a 33       	cpi	r24, 0x3A	; 58
    1846:	0c f0       	brlt	.+2      	; 0x184a <itoa+0x2c>
    1848:	89 5d       	subi	r24, 0xD9	; 217
    184a:	81 93       	st	Z+, r24
    184c:	cb 01       	movw	r24, r22
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	a1 f7       	brne	.-24     	; 0x183a <itoa+0x1c>
    1852:	16 f4       	brtc	.+4      	; 0x1858 <itoa+0x3a>
    1854:	5d e2       	ldi	r21, 0x2D	; 45
    1856:	51 93       	st	Z+, r21
    1858:	10 82       	st	Z, r1
    185a:	c9 01       	movw	r24, r18
    185c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <strrev>

00001860 <strrev>:
    1860:	dc 01       	movw	r26, r24
    1862:	fc 01       	movw	r30, r24
    1864:	67 2f       	mov	r22, r23
    1866:	71 91       	ld	r23, Z+
    1868:	77 23       	and	r23, r23
    186a:	e1 f7       	brne	.-8      	; 0x1864 <strrev+0x4>
    186c:	32 97       	sbiw	r30, 0x02	; 2
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <strrev+0x18>
    1870:	7c 91       	ld	r23, X
    1872:	6d 93       	st	X+, r22
    1874:	70 83       	st	Z, r23
    1876:	62 91       	ld	r22, -Z
    1878:	ae 17       	cp	r26, r30
    187a:	bf 07       	cpc	r27, r31
    187c:	c8 f3       	brcs	.-14     	; 0x1870 <strrev+0x10>
    187e:	08 95       	ret

00001880 <__udivmodhi4>:
    1880:	aa 1b       	sub	r26, r26
    1882:	bb 1b       	sub	r27, r27
    1884:	51 e1       	ldi	r21, 0x11	; 17
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <__udivmodhi4_ep>

00001888 <__udivmodhi4_loop>:
    1888:	aa 1f       	adc	r26, r26
    188a:	bb 1f       	adc	r27, r27
    188c:	a6 17       	cp	r26, r22
    188e:	b7 07       	cpc	r27, r23
    1890:	10 f0       	brcs	.+4      	; 0x1896 <__udivmodhi4_ep>
    1892:	a6 1b       	sub	r26, r22
    1894:	b7 0b       	sbc	r27, r23

00001896 <__udivmodhi4_ep>:
    1896:	88 1f       	adc	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	5a 95       	dec	r21
    189c:	a9 f7       	brne	.-22     	; 0x1888 <__udivmodhi4_loop>
    189e:	80 95       	com	r24
    18a0:	90 95       	com	r25
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	08 95       	ret

000018a8 <_exit>:
    18a8:	f8 94       	cli

000018aa <__stop_program>:
    18aa:	ff cf       	rjmp	.-2      	; 0x18aa <__stop_program>
